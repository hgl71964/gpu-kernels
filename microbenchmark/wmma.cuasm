// --------------------- FileHeader --------------------------
	// All file header info is kept as is (unless offset/size attributes)
	// The original header flags is not complete, thus discarded. 
	// 	.headerflags	@"EF_CUDA_TEXMODE_UNIFIED EF_CUDA_64BIT_ADDRESS EF_CUDA_SM80 EF_CUDA_VIRTUAL_SM(EF_CUDA_SM80)"
	// 	.elftype	@"ET_EXEC"
	// 
	// 
	.__elf_ident_osabi      51
	.__elf_ident_abiversion 7
	.__elf_type             ET_EXEC
	.__elf_machine          EM_CUDA
	.__elf_version          122 		// CUDA toolkit version 
	.__elf_entry            0 		// entry point address 
	.__elf_phoff            0xc40 		// program header offset, maybe updated by assembler
	.__elf_shoff            0x980 		// section header offset, maybe updated by assembler
	.__elf_flags            0x500550 		// Flags, SM_80(0x50), COMPUTE_80(0x50) 
	.__elf_ehsize           64 		// elf header size 
	.__elf_phentsize        56 		// program entry size
	.__elf_phnum            3 		// number of program entries
	.__elf_shentsize        64 		// section entry size
	.__elf_shnum            11 		// number of sections, currently no sections can be appended/removed
	.__elf_shstrndx         1 		// Section name string table index 


  //-------------------------------------------------
  //------------ END of FileHeader ------------------
  //-------------------------------------------------



// ---------------------                                  --------------------------
	// there will always be an empty section at index 0
	.section  "", 0, SHT_NULL
	.__section_name         0x0 	// offset in .shstrtab
	.__section_type         SHT_NULL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x0 	// maybe updated by assembler
	.__section_size         0x0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                0 	// equivalent to set sh_addralign

// --------------------- .shstrtab                        --------------------------
	.section  ".shstrtab", 0, SHT_STRTAB
	// all strings in .shstrtab section will be kept as is.
	.__section_name         0x1 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x40 	// maybe updated by assembler
	.__section_size         0x10f 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .shstrtab[0] = b'\x00' 
    /*0000*/ .byte 0x00

    // .shstrtab[1] = b'.shstrtab\x00' 
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .shstrtab[2] = b'.strtab\x00' 
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[3] = b'.symtab\x00' 
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[4] = b'.symtab_shndx\x00' 
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .shstrtab[5] = b'.nv.uft.entry\x00' 
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x75, 0x66, 0x74, 0x2e
    /*0031*/ .byte 0x65, 0x6e, 0x74, 0x72, 0x79, 0x00

    // .shstrtab[6] = b'.nv.info\x00' 
    /*0037*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*003f*/ .byte 0x00

    // .shstrtab[7] = b'.text._Z6kernelP6__halfS0_Pfiii\x00' 
    /*0040*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*0048*/ .byte 0x36, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50
    /*0050*/ .byte 0x36, 0x5f, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x53
    /*0058*/ .byte 0x30, 0x5f, 0x50, 0x66, 0x69, 0x69, 0x69, 0x00

    // .shstrtab[8] = b'.nv.info._Z6kernelP6__halfS0_Pfiii\x00' 
    /*0060*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0068*/ .byte 0x2e, 0x5f, 0x5a, 0x36, 0x6b, 0x65, 0x72, 0x6e
    /*0070*/ .byte 0x65, 0x6c, 0x50, 0x36, 0x5f, 0x5f, 0x68, 0x61
    /*0078*/ .byte 0x6c, 0x66, 0x53, 0x30, 0x5f, 0x50, 0x66, 0x69
    /*0080*/ .byte 0x69, 0x69, 0x00

    // .shstrtab[9] = b'.nv.shared._Z6kernelP6__halfS0_Pfiii\x00' 
    /*0083*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*008b*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x36, 0x6b, 0x65
    /*0093*/ .byte 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x36, 0x5f, 0x5f
    /*009b*/ .byte 0x68, 0x61, 0x6c, 0x66, 0x53, 0x30, 0x5f, 0x50
    /*00a3*/ .byte 0x66, 0x69, 0x69, 0x69, 0x00

    // .shstrtab[10] = b'.nv.constant0._Z6kernelP6__halfS0_Pfiii\x00' 
    /*00a8*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*00b0*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*00b8*/ .byte 0x36, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50
    /*00c0*/ .byte 0x36, 0x5f, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x53
    /*00c8*/ .byte 0x30, 0x5f, 0x50, 0x66, 0x69, 0x69, 0x69, 0x00

    // .shstrtab[11] = b'.debug_frame\x00' 
    /*00d0*/ .byte 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66
    /*00d8*/ .byte 0x72, 0x61, 0x6d, 0x65, 0x00

    // .shstrtab[12] = b'.rel.debug_frame\x00' 
    /*00dd*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62
    /*00e5*/ .byte 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65
    /*00ed*/ .byte 0x00

    // .shstrtab[13] = b'.rela.debug_frame\x00' 
    /*00ee*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e, 0x64, 0x65
    /*00f6*/ .byte 0x62, 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d
    /*00fe*/ .byte 0x65, 0x00

    // .shstrtab[14] = b'.nv.rel.action\x00' 
    /*0100*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x72, 0x65, 0x6c, 0x2e
    /*0108*/ .byte 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x00


// --------------------- .strtab                          --------------------------
	.section  ".strtab", 0, SHT_STRTAB
	// all strings in .strtab section will be kept as is.
	.__section_name         0xb 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x14f 	// maybe updated by assembler
	.__section_size         0x130 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .strtab[0] = b'\x00' 
    /*0000*/ .byte 0x00

    // .strtab[1] = b'.shstrtab\x00' 
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .strtab[2] = b'.strtab\x00' 
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .strtab[3] = b'.symtab\x00' 
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .strtab[4] = b'.symtab_shndx\x00' 
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .strtab[5] = b'.nv.uft.entry\x00' 
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x75, 0x66, 0x74, 0x2e
    /*0031*/ .byte 0x65, 0x6e, 0x74, 0x72, 0x79, 0x00

    // .strtab[6] = b'.nv.info\x00' 
    /*0037*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*003f*/ .byte 0x00

    // .strtab[7] = b'_Z6kernelP6__halfS0_Pfiii\x00' 
    /*0040*/ .byte 0x5f, 0x5a, 0x36, 0x6b, 0x65, 0x72, 0x6e, 0x65
    /*0048*/ .byte 0x6c, 0x50, 0x36, 0x5f, 0x5f, 0x68, 0x61, 0x6c
    /*0050*/ .byte 0x66, 0x53, 0x30, 0x5f, 0x50, 0x66, 0x69, 0x69
    /*0058*/ .byte 0x69, 0x00

    // .strtab[8] = b'.text._Z6kernelP6__halfS0_Pfiii\x00' 
    /*005a*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*0062*/ .byte 0x36, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50
    /*006a*/ .byte 0x36, 0x5f, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x53
    /*0072*/ .byte 0x30, 0x5f, 0x50, 0x66, 0x69, 0x69, 0x69, 0x00

    // .strtab[9] = b'.nv.info._Z6kernelP6__halfS0_Pfiii\x00' 
    /*007a*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0082*/ .byte 0x2e, 0x5f, 0x5a, 0x36, 0x6b, 0x65, 0x72, 0x6e
    /*008a*/ .byte 0x65, 0x6c, 0x50, 0x36, 0x5f, 0x5f, 0x68, 0x61
    /*0092*/ .byte 0x6c, 0x66, 0x53, 0x30, 0x5f, 0x50, 0x66, 0x69
    /*009a*/ .byte 0x69, 0x69, 0x00

    // .strtab[10] = b'.nv.shared._Z6kernelP6__halfS0_Pfiii\x00' 
    /*009d*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*00a5*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x36, 0x6b, 0x65
    /*00ad*/ .byte 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x36, 0x5f, 0x5f
    /*00b5*/ .byte 0x68, 0x61, 0x6c, 0x66, 0x53, 0x30, 0x5f, 0x50
    /*00bd*/ .byte 0x66, 0x69, 0x69, 0x69, 0x00

    // .strtab[11] = b'.nv.constant0._Z6kernelP6__halfS0_Pfiii\x00' 
    /*00c2*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*00ca*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*00d2*/ .byte 0x36, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50
    /*00da*/ .byte 0x36, 0x5f, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x53
    /*00e2*/ .byte 0x30, 0x5f, 0x50, 0x66, 0x69, 0x69, 0x69, 0x00

    // .strtab[12] = b'_param\x00' 
    /*00ea*/ .byte 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x00

    // .strtab[13] = b'.debug_frame\x00' 
    /*00f1*/ .byte 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66
    /*00f9*/ .byte 0x72, 0x61, 0x6d, 0x65, 0x00

    // .strtab[14] = b'.rel.debug_frame\x00' 
    /*00fe*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62
    /*0106*/ .byte 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65
    /*010e*/ .byte 0x00

    // .strtab[15] = b'.rela.debug_frame\x00' 
    /*010f*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e, 0x64, 0x65
    /*0117*/ .byte 0x62, 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d
    /*011f*/ .byte 0x65, 0x00

    // .strtab[16] = b'.nv.rel.action\x00' 
    /*0121*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x72, 0x65, 0x6c, 0x2e
    /*0129*/ .byte 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x00


// --------------------- .symtab                          --------------------------
	.section  ".symtab", 0, SHT_SYMTAB
	// all symbols in .symtab sections will be kept
	// but the symbol size may be changed accordingly
	.__section_name         0x13 	// offset in .shstrtab
	.__section_type         SHT_SYMTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x280 	// maybe updated by assembler
	.__section_size         0x90 	// maybe updated by assembler
	.__section_link         2
	.__section_info         0x5
	.__section_entsize      24
	.align                8 	// equivalent to set sh_addralign
    // Symbol[0] "": Container({'st_name': 0, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_NOTYPE'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 'SHN_UNDEF', 'st_value': 0, 'st_size': 0})
    /*0000*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0008*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0010*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[1] ".text._Z6kernelP6__halfS0_Pfiii": Container({'st_name': 90, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 10, 'st_value': 0, 'st_size': 0})
    /*0018*/ .byte 0x5a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0a, 0x00
    /*0020*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0028*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[2] ".nv.constant0._Z6kernelP6__halfS0_Pfiii": Container({'st_name': 194, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 9, 'st_value': 0, 'st_size': 0})
    /*0030*/ .byte 0xc2, 0x00, 0x00, 0x00, 0x03, 0x00, 0x09, 0x00
    /*0038*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0040*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[3] ".debug_frame": Container({'st_name': 241, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 4, 'st_value': 0, 'st_size': 0})
    /*0048*/ .byte 0xf1, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00
    /*0050*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0058*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[4] ".nv.rel.action": Container({'st_name': 289, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 7, 'st_value': 0, 'st_size': 0})
    /*0060*/ .byte 0x21, 0x01, 0x00, 0x00, 0x03, 0x00, 0x07, 0x00
    /*0068*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0070*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[5] "_Z6kernelP6__halfS0_Pfiii": Container({'st_name': 64, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_FUNC'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 10, 'st_value': 0, 'st_size': 896})
    /*0078*/ .byte 0x40, 0x00, 0x00, 0x00, 0x12, 0x10, 0x0a, 0x00
    /*0080*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0088*/ .byte 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00


// --------------------- .debug_frame                     --------------------------
	.section	.debug_frame,"",@progbits
	.__section_name         0xd0 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x310 	// maybe updated by assembler
	.__section_size         0x70 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
  .debug_frame:
          /*0000*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff
          /*0010*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x04, 0x7c, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0c, 0x81, 0x80
          /*0020*/ 	.byte	0x80, 0x28, 0x00, 0x08, 0xff, 0x81, 0x80, 0x28, 0x08, 0x81, 0x80, 0x80, 0x28, 0x00, 0x00, 0x00
          /*0030*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*0040*/ 	.byte	0x00, 0x00, 0x00, 0x00
          /*0044*/ 	.dword	_Z6kernelP6__halfS0_Pfiii
          /*004c*/ 	.byte	0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x9c, 0x00
          /*005c*/ 	.byte	0x00, 0x00, 0x0c, 0x81, 0x80, 0x80, 0x28, 0x00, 0x04, 0xfc, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00
          /*006c*/ 	.byte	0x00, 0x00, 0x00, 0x00
  
  
// --------------------- .nv.info                         --------------------------
	.section	.nv.info,"",@"SHT_CUDA_INFO"
	.__section_name         0x37 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x380 	// maybe updated by assembler
	.__section_size         0x30 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x0
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_REGCOUNT
  	.align		4
          /*0000*/ 	.byte	0x04, 0x2f
          /*0002*/ 	.short	(.L_1 - .L_0)
  	.align		4
  .L_0:
          /*0004*/ 	.word	index@(_Z6kernelP6__halfS0_Pfiii)
          /*0008*/ 	.word	0x0000001a
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_1:
          /*000c*/ 	.byte	0x04, 0x23
          /*000e*/ 	.short	(.L_3 - .L_2)
  	.align		4
  .L_2:
          /*0010*/ 	.word	index@(_Z6kernelP6__halfS0_Pfiii)
          /*0014*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_3:
          /*0018*/ 	.byte	0x04, 0x12
          /*001a*/ 	.short	(.L_5 - .L_4)
  	.align		4
  .L_4:
          /*001c*/ 	.word	index@(_Z6kernelP6__halfS0_Pfiii)
          /*0020*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_5:
          /*0024*/ 	.byte	0x04, 0x11
          /*0026*/ 	.short	(.L_7 - .L_6)
  	.align		4
  .L_6:
          /*0028*/ 	.word	index@(_Z6kernelP6__halfS0_Pfiii)
          /*002c*/ 	.word	0x00000000
  .L_7:
  
  
// --------------------- .nv.info._Z6kernelP6__halfS0_Pfiii --------------------------
	.section	.nv.info._Z6kernelP6__halfS0_Pfiii,"",@"SHT_CUDA_INFO"
	.__section_name         0x60 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x3b0 	// maybe updated by assembler
	.__section_size         0x8c 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0xa
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_CUDA_API_VERSION
  	.align		4
          /*0000*/ 	.byte	0x04, 0x37
          /*0002*/ 	.short	(.L_9 - .L_8)
  .L_8:
          /*0004*/ 	.word	0x0000007a
  
  
  	//----- nvinfo : EIATTR_SW2861232_WAR
  	.align		4
  .L_9:
          /*0008*/ 	.byte	0x01, 0x35
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_PARAM_CBANK
  	.align		4
          /*000c*/ 	.byte	0x04, 0x0a
          /*000e*/ 	.short	(.L_11 - .L_10)
  	.align		4
  .L_10:
          /*0010*/ 	.word	index@(.nv.constant0._Z6kernelP6__halfS0_Pfiii)
          /*0014*/ 	.short	0x0160
          /*0016*/ 	.short	0x0024
  
  
  	//----- nvinfo : EIATTR_CBANK_PARAM_SIZE
  	.align		4
  .L_11:
          /*0018*/ 	.byte	0x03, 0x19
          /*001a*/ 	.short	0x0024
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
          /*001c*/ 	.byte	0x04, 0x17
          /*001e*/ 	.short	(.L_13 - .L_12)
  .L_12:
          /*0020*/ 	.word	0x00000000
          /*0024*/ 	.short	0x0005
          /*0026*/ 	.short	0x0020
          /*0028*/ 	.byte	0x00, 0xf0, 0x11, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_13:
          /*002c*/ 	.byte	0x04, 0x17
          /*002e*/ 	.short	(.L_15 - .L_14)
  .L_14:
          /*0030*/ 	.word	0x00000000
          /*0034*/ 	.short	0x0004
          /*0036*/ 	.short	0x001c
          /*0038*/ 	.byte	0x00, 0xf0, 0x11, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_15:
          /*003c*/ 	.byte	0x04, 0x17
          /*003e*/ 	.short	(.L_17 - .L_16)
  .L_16:
          /*0040*/ 	.word	0x00000000
          /*0044*/ 	.short	0x0003
          /*0046*/ 	.short	0x0018
          /*0048*/ 	.byte	0x00, 0xf0, 0x11, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_17:
          /*004c*/ 	.byte	0x04, 0x17
          /*004e*/ 	.short	(.L_19 - .L_18)
  .L_18:
          /*0050*/ 	.word	0x00000000
          /*0054*/ 	.short	0x0002
          /*0056*/ 	.short	0x0010
          /*0058*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_19:
          /*005c*/ 	.byte	0x04, 0x17
          /*005e*/ 	.short	(.L_21 - .L_20)
  .L_20:
          /*0060*/ 	.word	0x00000000
          /*0064*/ 	.short	0x0001
          /*0066*/ 	.short	0x0008
          /*0068*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_21:
          /*006c*/ 	.byte	0x04, 0x17
          /*006e*/ 	.short	(.L_23 - .L_22)
  .L_22:
          /*0070*/ 	.word	0x00000000
          /*0074*/ 	.short	0x0000
          /*0076*/ 	.short	0x0000
          /*0078*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_WMMA_USED
  	.align		4
  .L_23:
          /*007c*/ 	.byte	0x01, 0x2b
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_MAXREG_COUNT
  	.align		4
          /*0080*/ 	.byte	0x03, 0x1b
          /*0082*/ 	.short	0x00ff
  
  
  	//----- nvinfo : EIATTR_EXIT_INSTR_OFFSETS
  	.align		4
          /*0084*/ 	.byte	0x04, 0x1c
          /*0086*/ 	.short	(.L_25 - .L_24)
  
  
  	//   ....[0]....
  .L_24:
          /*0088*/ 	.word	0x00000270
  .L_25:
  
  
// --------------------- .nv.rel.action                   --------------------------
	.section	.nv.rel.action,"",@"SHT_CUDA_RELOCINFO"
	.__section_name         0x100 	// offset in .shstrtab
	.__section_type         1879048203
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x440 	// maybe updated by assembler
	.__section_size         0x10 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      8
	.align                8 	// equivalent to set sh_addralign
  	.align	8
  	.sectionentsize	8
          /*0000*/ 	.byte	0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x25, 0x00, 0x05, 0x36
  
  
// --------------------- .rel.debug_frame                 --------------------------
	.section  ".rel.debug_frame", 0, SHT_REL
	// all relocation sections will be dynamically generated by assembler 
	// but most of the section header will be kept as is.
	.__section_name         0xdd 	// offset in .shstrtab
	.__section_type         SHT_REL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x450 	// maybe updated by assembler
	.__section_size         0x10 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x4
	.__section_entsize      16
	.align                8 	// equivalent to set sh_addralign
    // Relocation[0] : _Z6kernelP6__halfS0_Pfiii, Container({'r_offset': 68, 'r_info': 21474836482, 'r_info_sym': 5, 'r_info_type': 2})

// --------------------- .nv.constant0._Z6kernelP6__halfS0_Pfiii --------------------------
	.section	.nv.constant0._Z6kernelP6__halfS0_Pfiii,"a",@progbits
	.__section_name         0xa8 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x460 	// maybe updated by assembler
	.__section_size         0x184 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0xa
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.constant0._Z6kernelP6__halfS0_Pfiii:
  	.zero		388
  
  
// --------------------- .text._Z6kernelP6__halfS0_Pfiii  --------------------------
	.section	.text._Z6kernelP6__halfS0_Pfiii,"ax",@progbits
	.__section_name         0x40 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x6
	.__section_addr         0x0
	.__section_offset       0x600 	// maybe updated by assembler
	.__section_size         0x380 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x1a000005
	.__section_entsize      0
	.align                128 	// equivalent to set sh_addralign
  	.sectioninfo	@"SHI_REGISTERS=26"
  	.align	128
          .global         _Z6kernelP6__halfS0_Pfiii
          .type           _Z6kernelP6__halfS0_Pfiii,@function
          .size           _Z6kernelP6__halfS0_Pfiii,(.L_x_1 - _Z6kernelP6__halfS0_Pfiii)
          .other          _Z6kernelP6__halfS0_Pfiii,@"STO_CUDA_ENTRY STV_DEFAULT"
  _Z6kernelP6__halfS0_Pfiii:
  .text._Z6kernelP6__halfS0_Pfiii:
      [B------:R-:W-:Y:S02]         /*0000*/                   IMAD.MOV.U32 R1, RZ, RZ, c[0x0][0x28] ;
      [B------:R-:W0:-:S01]         /*0010*/                   S2R R3, SR_LANEID ;
      [B------:R-:W-:-:S01]         /*0020*/                   IMAD.MOV.U32 R5, RZ, RZ, RZ ;
      [B------:R-:W-:-:S01]         /*0030*/                   ULDC.64 UR4, c[0x0][0x118] ;
      [B0-----:R-:W-:-:S02]         /*0040*/                   LOP3.LUT R4, R3, 0x3, RZ, 0xc0, !PT ;
      [B------:R-:W-:Y:S05]         /*0050*/                   SHF.R.U32.HI R2, RZ, 0x2, R3 ;
      [B------:R-:W-:Y:S05]         /*0060*/                   IMAD.WIDE.U32 R4, R2, 0x8, R4 ;

      // load matrix_a (16x16)
      [B------:R-:W-:Y:S04]         /*0070*/                   LEA R8, P0, R4, c[0x0][0x160], 0x2 ;
      [B------:R-:W-:Y:S05]         /*0080*/                   LEA.HI.X R9, R4, c[0x0][0x164], R5, 0x2, P0 ;
      [B------:R-:W2:-:S04]         /*0090*/                   LDG.E R0, desc[UR4][R8.64] ;
      [B------:R-:W3:-:S04]         /*00a0*/                   LDG.E R16, desc[UR4][R8.64+0x10] ;
      [B------:R-:W4:-:S04]         /*00b0*/                   LDG.E R6, desc[UR4][R8.64+0x100] ;
      [B------:R-:W4:-:S01]         /*00c0*/                   LDG.E R7, desc[UR4][R8.64+0x110] ;

      // load matrix_b (two of 16x8)
      [B------:R-:W-:Y:S04]         /*00d0*/                   LEA R14, P0, R4, c[0x0][0x168], 0x2 ;
      [B------:R-:W-:Y:S05]         /*00e0*/                   LEA.HI.X R15, R4, c[0x0][0x16c], R5, 0x2, P0 ;
      [B------:R-:W4:-:S04]         /*00f0*/                   LDG.E R10, desc[UR4][R14.64] ;
      [B------:R-:W4:-:S04]         /*0100*/                   LDG.E R11, desc[UR4][R14.64+0x10] ;
      [B------:R-:W4:-:S04]         /*0110*/                   LDG.E R12, desc[UR4][R14.64+0x100] ;
      [B------:R-:W4:-:S01]         /*0120*/                   LDG.E R13, desc[UR4][R14.64+0x110] ;

      [B------:R-:W-:Y:S02]         /*0130*/                   IMAD.SHL.U32 R17, R3, 0x2, RZ ;
      [B------:R-:W-:Y:S03]         /*0140*/                   IMAD.MOV.U32 R3, RZ, RZ, RZ ;
      [B------:R-:W-:Y:S05]         /*0150*/                   LOP3.LUT R17, R17, 0x6, RZ, 0xe2, !PT ;
      [B------:R-:W-:-:S01]         /*0160*/                   IMAD.WIDE.U32 R2, R17, 0x10, R2 ;


      [B--2---:R-:W-:-:S04]         /*0170*/                   MOVM.16.MT88 R4, R0 ;
      [B---3--:R-:W-:-:S04]         /*0180*/                   MOVM.16.MT88 R5, R16 ;
      [B----4-:R-:W-:-:S04]         /*0190*/                   MOVM.16.MT88 R6, R6 ;
      [B------:R-:W0:-:S02]         /*01a0*/                   MOVM.16.MT88 R7, R7 ;

        // (two of 16x8x16 HMMA)
      [B0-----:R-:W5:-:S08]         /*01b0*/                   HMMA.16816.F32 R8, R4.reuse, R10, RZ ;
      [B------:R5:W5:-:S07]         /*01c0*/                   HMMA.16816.F32 R20, R4, R12, RZ ;

      // store
      [B-----5:R-:W-:Y:S04]         /*01d0*/                   LEA R4, P0, R2, c[0x0][0x170], 0x2 ;
      [B------:R-:W-:Y:S05]         /*01e0*/                   LEA.HI.X R5, R2, c[0x0][0x174], R3, 0x2, P0 ;
      [B------:R-:W-:-:S04]         /*01f0*/                   STG.E desc[UR4][R4.64], R8 ;
      [B------:R-:W-:-:S04]         /*0200*/                   STG.E desc[UR4][R4.64+0x40], R9 ;
      [B------:R-:W-:-:S04]         /*0210*/                   STG.E desc[UR4][R4.64+0x20], R10 ;
      [B------:R-:W-:-:S04]         /*0220*/                   STG.E desc[UR4][R4.64+0x60], R11 ;
      [B------:R-:W-:-:S04]         /*0230*/                   STG.E desc[UR4][R4.64+0x200], R20 ;
      [B------:R-:W-:-:S04]         /*0240*/                   STG.E desc[UR4][R4.64+0x240], R21 ;
      [B------:R-:W-:-:S04]         /*0250*/                   STG.E desc[UR4][R4.64+0x220], R22 ;
      [B------:R-:W-:-:S01]         /*0260*/                   STG.E desc[UR4][R4.64+0x260], R23 ;
      [B------:R-:W-:-:S05]         /*0270*/                   EXIT ;
  .L_x_0:
      [B------:R-:W-:Y:S00]         /*0280*/                   BRA `(.L_x_0);
      [B------:R-:W-:Y:S00]         /*0290*/                   NOP;
      [B------:R-:W-:Y:S00]         /*02a0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*02b0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*02c0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*02d0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*02e0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*02f0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0300*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0310*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0320*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0330*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0340*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0350*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0360*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0370*/                   NOP;
  .L_x_1:

  //-------------------------------------------------
  //---------------- END of sections ----------------
  //-------------------------------------------------


// Program segment PT_PHDR, 5 
  .__segment  "PT_PHDR", 5 
  .__segment_offset  0xc40   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0xa8   		// file size, maybe updated by assembler 
  .__segment_memsz   0xa8   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  

// Program segment PT_LOAD, 5 
  .__segment  "PT_LOAD", 5 
  .__segment_offset  0x460   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0x520   		// file size, maybe updated by assembler 
  .__segment_memsz   0x520   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  
  .__segment_startsection    ".nv.constant0._Z6kernelP6__halfS0_Pfiii"  		// first section in this segment 
  .__segment_endsection      ".text._Z6kernelP6__halfS0_Pfiii"  		// last  section in this segment 

// Program segment PT_LOAD, 5 
  .__segment  "PT_LOAD", 5 
  .__segment_offset  0xc40   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0xa8   		// file size, maybe updated by assembler 
  .__segment_memsz   0xa8   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  
  .__segment_startsection    "@PROGRAM_HEADER"  		// first section in this segment 
  .__segment_endsection      "@PROGRAM_HEADER"  		// last  section in this segment 


  //-------------------------------------------------
  //---------------- END of segments ----------------
  //-------------------------------------------------


