// --------------------- FileHeader --------------------------
	// All file header info is kept as is (unless offset/size attributes)
	// The original header flags is not complete, thus discarded.
	// 	.headerflags	@"EF_CUDA_TEXMODE_UNIFIED EF_CUDA_64BIT_ADDRESS EF_CUDA_SM80 EF_CUDA_VIRTUAL_SM(EF_CUDA_SM52)"
	// 	.elftype	@"ET_EXEC"
	//
	//
	.__elf_ident_osabi      51
	.__elf_ident_abiversion 7
	.__elf_type             ET_EXEC
	.__elf_machine          EM_CUDA
	.__elf_version          122 		// CUDA toolkit version
	.__elf_entry            0 		// entry point address
	.__elf_phoff            0xb40 		// program header offset, maybe updated by assembler
	.__elf_shoff            0x880 		// section header offset, maybe updated by assembler
	.__elf_flags            0x340550 		// Flags, SM_80(0x50), COMPUTE_52(0x34)
	.__elf_ehsize           64 		// elf header size
	.__elf_phentsize        56 		// program entry size
	.__elf_phnum            3 		// number of program entries
	.__elf_shentsize        64 		// section entry size
	.__elf_shnum            11 		// number of sections, currently no sections can be appended/removed
	.__elf_shstrndx         1 		// Section name string table index


  //-------------------------------------------------
  //------------ END of FileHeader ------------------
  //-------------------------------------------------



// ---------------------                                  --------------------------
	// there will always be an empty section at index 0
	.section  "", 0, SHT_NULL
	.__section_name         0x0 	// offset in .shstrtab
	.__section_type         SHT_NULL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x0 	// maybe updated by assembler
	.__section_size         0x0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                0 	// equivalent to set sh_addralign

// --------------------- .shstrtab                        --------------------------
	.section  ".shstrtab", 0, SHT_STRTAB
	// all strings in .shstrtab section will be kept as is.
	.__section_name         0x1 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x40 	// maybe updated by assembler
	.__section_size         0xe3 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .shstrtab[0] = b'\x00'
    /*0000*/ .byte 0x00

    // .shstrtab[1] = b'.shstrtab\x00'
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .shstrtab[2] = b'.strtab\x00'
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[3] = b'.symtab\x00'
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[4] = b'.symtab_shndx\x00'
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .shstrtab[5] = b'.nv.uft.entry\x00'
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x75, 0x66, 0x74, 0x2e
    /*0031*/ .byte 0x65, 0x6e, 0x74, 0x72, 0x79, 0x00

    // .shstrtab[6] = b'.nv.info\x00'
    /*0037*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*003f*/ .byte 0x00

    // .shstrtab[7] = b'.text._Z3addPiS_S_Px\x00'
    /*0040*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*0048*/ .byte 0x33, 0x61, 0x64, 0x64, 0x50, 0x69, 0x53, 0x5f
    /*0050*/ .byte 0x53, 0x5f, 0x50, 0x78, 0x00

    // .shstrtab[8] = b'.nv.info._Z3addPiS_S_Px\x00'
    /*0055*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*005d*/ .byte 0x2e, 0x5f, 0x5a, 0x33, 0x61, 0x64, 0x64, 0x50
    /*0065*/ .byte 0x69, 0x53, 0x5f, 0x53, 0x5f, 0x50, 0x78, 0x00

    // .shstrtab[9] = b'.nv.shared._Z3addPiS_S_Px\x00'
    /*006d*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*0075*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x33, 0x61, 0x64
    /*007d*/ .byte 0x64, 0x50, 0x69, 0x53, 0x5f, 0x53, 0x5f, 0x50
    /*0085*/ .byte 0x78, 0x00

    // .shstrtab[10] = b'.nv.constant0._Z3addPiS_S_Px\x00'
    /*0087*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*008f*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*0097*/ .byte 0x33, 0x61, 0x64, 0x64, 0x50, 0x69, 0x53, 0x5f
    /*009f*/ .byte 0x53, 0x5f, 0x50, 0x78, 0x00

    // .shstrtab[11] = b'.debug_frame\x00'
    /*00a4*/ .byte 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66
    /*00ac*/ .byte 0x72, 0x61, 0x6d, 0x65, 0x00

    // .shstrtab[12] = b'.rel.debug_frame\x00'
    /*00b1*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62
    /*00b9*/ .byte 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65
    /*00c1*/ .byte 0x00

    // .shstrtab[13] = b'.rela.debug_frame\x00'
    /*00c2*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e, 0x64, 0x65
    /*00ca*/ .byte 0x62, 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d
    /*00d2*/ .byte 0x65, 0x00

    // .shstrtab[14] = b'.nv.rel.action\x00'
    /*00d4*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x72, 0x65, 0x6c, 0x2e
    /*00dc*/ .byte 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x00


// --------------------- .strtab                          --------------------------
	.section  ".strtab", 0, SHT_STRTAB
	// all strings in .strtab section will be kept as is.
	.__section_name         0xb 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x123 	// maybe updated by assembler
	.__section_size         0xf9 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .strtab[0] = b'\x00'
    /*0000*/ .byte 0x00

    // .strtab[1] = b'.shstrtab\x00'
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .strtab[2] = b'.strtab\x00'
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .strtab[3] = b'.symtab\x00'
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .strtab[4] = b'.symtab_shndx\x00'
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .strtab[5] = b'.nv.uft.entry\x00'
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x75, 0x66, 0x74, 0x2e
    /*0031*/ .byte 0x65, 0x6e, 0x74, 0x72, 0x79, 0x00

    // .strtab[6] = b'.nv.info\x00'
    /*0037*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*003f*/ .byte 0x00

    // .strtab[7] = b'_Z3addPiS_S_Px\x00'
    /*0040*/ .byte 0x5f, 0x5a, 0x33, 0x61, 0x64, 0x64, 0x50, 0x69
    /*0048*/ .byte 0x53, 0x5f, 0x53, 0x5f, 0x50, 0x78, 0x00

    // .strtab[8] = b'.text._Z3addPiS_S_Px\x00'
    /*004f*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*0057*/ .byte 0x33, 0x61, 0x64, 0x64, 0x50, 0x69, 0x53, 0x5f
    /*005f*/ .byte 0x53, 0x5f, 0x50, 0x78, 0x00

    // .strtab[9] = b'.nv.info._Z3addPiS_S_Px\x00'
    /*0064*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*006c*/ .byte 0x2e, 0x5f, 0x5a, 0x33, 0x61, 0x64, 0x64, 0x50
    /*0074*/ .byte 0x69, 0x53, 0x5f, 0x53, 0x5f, 0x50, 0x78, 0x00

    // .strtab[10] = b'.nv.shared._Z3addPiS_S_Px\x00'
    /*007c*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*0084*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x33, 0x61, 0x64
    /*008c*/ .byte 0x64, 0x50, 0x69, 0x53, 0x5f, 0x53, 0x5f, 0x50
    /*0094*/ .byte 0x78, 0x00

    // .strtab[11] = b'.nv.constant0._Z3addPiS_S_Px\x00'
    /*0096*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*009e*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*00a6*/ .byte 0x33, 0x61, 0x64, 0x64, 0x50, 0x69, 0x53, 0x5f
    /*00ae*/ .byte 0x53, 0x5f, 0x50, 0x78, 0x00

    // .strtab[12] = b'_param\x00'
    /*00b3*/ .byte 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x00

    // .strtab[13] = b'.debug_frame\x00'
    /*00ba*/ .byte 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66
    /*00c2*/ .byte 0x72, 0x61, 0x6d, 0x65, 0x00

    // .strtab[14] = b'.rel.debug_frame\x00'
    /*00c7*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62
    /*00cf*/ .byte 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65
    /*00d7*/ .byte 0x00

    // .strtab[15] = b'.rela.debug_frame\x00'
    /*00d8*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e, 0x64, 0x65
    /*00e0*/ .byte 0x62, 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d
    /*00e8*/ .byte 0x65, 0x00

    // .strtab[16] = b'.nv.rel.action\x00'
    /*00ea*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x72, 0x65, 0x6c, 0x2e
    /*00f2*/ .byte 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x00


// --------------------- .symtab                          --------------------------
	.section  ".symtab", 0, SHT_SYMTAB
	// all symbols in .symtab sections will be kept
	// but the symbol size may be changed accordingly
	.__section_name         0x13 	// offset in .shstrtab
	.__section_type         SHT_SYMTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x220 	// maybe updated by assembler
	.__section_size         0x90 	// maybe updated by assembler
	.__section_link         2
	.__section_info         0x5
	.__section_entsize      24
	.align                8 	// equivalent to set sh_addralign
    // Symbol[0] "": Container({'st_name': 0, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_NOTYPE'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 'SHN_UNDEF', 'st_value': 0, 'st_size': 0})
    /*0000*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0008*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0010*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[1] ".text._Z3addPiS_S_Px": Container({'st_name': 79, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 10, 'st_value': 0, 'st_size': 0})
    /*0018*/ .byte 0x4f, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0a, 0x00
    /*0020*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0028*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[2] ".nv.constant0._Z3addPiS_S_Px": Container({'st_name': 150, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 9, 'st_value': 0, 'st_size': 0})
    /*0030*/ .byte 0x96, 0x00, 0x00, 0x00, 0x03, 0x00, 0x09, 0x00
    /*0038*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0040*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[3] ".debug_frame": Container({'st_name': 186, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 4, 'st_value': 0, 'st_size': 0})
    /*0048*/ .byte 0xba, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00
    /*0050*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0058*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[4] ".nv.rel.action": Container({'st_name': 234, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 7, 'st_value': 0, 'st_size': 0})
    /*0060*/ .byte 0xea, 0x00, 0x00, 0x00, 0x03, 0x00, 0x07, 0x00
    /*0068*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0070*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[5] "_Z3addPiS_S_Px": Container({'st_name': 64, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_FUNC'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 10, 'st_value': 0, 'st_size': 768})
    /*0078*/ .byte 0x40, 0x00, 0x00, 0x00, 0x12, 0x10, 0x0a, 0x00
    /*0080*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0088*/ .byte 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00


// --------------------- .debug_frame                     --------------------------
	.section	.debug_frame,"",@progbits
	.__section_name         0xa4 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x2b0 	// maybe updated by assembler
	.__section_size         0x70 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
  .debug_frame:
          /*0000*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff
          /*0010*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x04, 0x7c, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0c, 0x81, 0x80
          /*0020*/ 	.byte	0x80, 0x28, 0x00, 0x08, 0xff, 0x81, 0x80, 0x28, 0x08, 0x81, 0x80, 0x80, 0x28, 0x00, 0x00, 0x00
          /*0030*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*0040*/ 	.byte	0x00, 0x00, 0x00, 0x00
          /*0044*/ 	.dword	_Z3addPiS_S_Px
          /*004c*/ 	.byte	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x3c, 0x00
          /*005c*/ 	.byte	0x00, 0x00, 0x0c, 0x81, 0x80, 0x80, 0x28, 0x00, 0x04, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*006c*/ 	.byte	0x00, 0x00, 0x00, 0x00


// --------------------- .nv.info                         --------------------------
	.section	.nv.info,"",@"SHT_CUDA_INFO"
	.__section_name         0x37 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x320 	// maybe updated by assembler
	.__section_size         0x30 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x0
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4


  	//----- nvinfo : EIATTR_REGCOUNT
  	.align		4
          /*0000*/ 	.byte	0x04, 0x2f
          /*0002*/ 	.short	(.L_1 - .L_0)
  	.align		4
  .L_0:
          /*0004*/ 	.word	index@(_Z3addPiS_S_Px)
          /*0008*/ 	.word	0x00000014


  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_1:
          /*000c*/ 	.byte	0x04, 0x23
          /*000e*/ 	.short	(.L_3 - .L_2)
  	.align		4
  .L_2:
          /*0010*/ 	.word	index@(_Z3addPiS_S_Px)
          /*0014*/ 	.word	0x00000000


  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_3:
          /*0018*/ 	.byte	0x04, 0x12
          /*001a*/ 	.short	(.L_5 - .L_4)
  	.align		4
  .L_4:
          /*001c*/ 	.word	index@(_Z3addPiS_S_Px)
          /*0020*/ 	.word	0x00000000


  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_5:
          /*0024*/ 	.byte	0x04, 0x11
          /*0026*/ 	.short	(.L_7 - .L_6)
  	.align		4
  .L_6:
          /*0028*/ 	.word	index@(_Z3addPiS_S_Px)
          /*002c*/ 	.word	0x00000000
  .L_7:


// --------------------- .nv.info._Z3addPiS_S_Px          --------------------------
	.section	.nv.info._Z3addPiS_S_Px,"",@"SHT_CUDA_INFO"
	.__section_name         0x55 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x350 	// maybe updated by assembler
	.__section_size         0x68 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0xa
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4


  	//----- nvinfo : EIATTR_CUDA_API_VERSION
  	.align		4
          /*0000*/ 	.byte	0x04, 0x37
          /*0002*/ 	.short	(.L_9 - .L_8)
  .L_8:
          /*0004*/ 	.word	0x0000007a


  	//----- nvinfo : EIATTR_SW2861232_WAR
  	.align		4
  .L_9:
          /*0008*/ 	.byte	0x01, 0x35
  	.zero		2


  	//----- nvinfo : EIATTR_PARAM_CBANK
  	.align		4
          /*000c*/ 	.byte	0x04, 0x0a
          /*000e*/ 	.short	(.L_11 - .L_10)
  	.align		4
  .L_10:
          /*0010*/ 	.word	index@(.nv.constant0._Z3addPiS_S_Px)
          /*0014*/ 	.short	0x0160
          /*0016*/ 	.short	0x0020


  	//----- nvinfo : EIATTR_CBANK_PARAM_SIZE
  	.align		4
  .L_11:
          /*0018*/ 	.byte	0x03, 0x19
          /*001a*/ 	.short	0x0020


  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
          /*001c*/ 	.byte	0x04, 0x17
          /*001e*/ 	.short	(.L_13 - .L_12)
  .L_12:
          /*0020*/ 	.word	0x00000000
          /*0024*/ 	.short	0x0003
          /*0026*/ 	.short	0x0018
          /*0028*/ 	.byte	0x00, 0xf0, 0x21, 0x00


  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_13:
          /*002c*/ 	.byte	0x04, 0x17
          /*002e*/ 	.short	(.L_15 - .L_14)
  .L_14:
          /*0030*/ 	.word	0x00000000
          /*0034*/ 	.short	0x0002
          /*0036*/ 	.short	0x0010
          /*0038*/ 	.byte	0x00, 0xf0, 0x21, 0x00


  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_15:
          /*003c*/ 	.byte	0x04, 0x17
          /*003e*/ 	.short	(.L_17 - .L_16)
  .L_16:
          /*0040*/ 	.word	0x00000000
          /*0044*/ 	.short	0x0001
          /*0046*/ 	.short	0x0008
          /*0048*/ 	.byte	0x00, 0xf0, 0x21, 0x00


  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_17:
          /*004c*/ 	.byte	0x04, 0x17
          /*004e*/ 	.short	(.L_19 - .L_18)
  .L_18:
          /*0050*/ 	.word	0x00000000
          /*0054*/ 	.short	0x0000
          /*0056*/ 	.short	0x0000
          /*0058*/ 	.byte	0x00, 0xf0, 0x21, 0x00


  	//----- nvinfo : EIATTR_MAXREG_COUNT
  	.align		4
  .L_19:
          /*005c*/ 	.byte	0x03, 0x1b
          /*005e*/ 	.short	0x00ff


  	//----- nvinfo : EIATTR_EXIT_INSTR_OFFSETS
  	.align		4
          /*0060*/ 	.byte	0x04, 0x1c
          /*0062*/ 	.short	(.L_21 - .L_20)


  	//   ....[0]....
  .L_20:
          /*0064*/ 	.word	0x00000230
  .L_21:


// --------------------- .nv.rel.action                   --------------------------
	.section	.nv.rel.action,"",@"SHT_CUDA_RELOCINFO"
	.__section_name         0xd4 	// offset in .shstrtab
	.__section_type         1879048203
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x3b8 	// maybe updated by assembler
	.__section_size         0x10 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      8
	.align                8 	// equivalent to set sh_addralign
  	.align	8
  	.sectionentsize	8
          /*0000*/ 	.byte	0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x25, 0x00, 0x05, 0x36


// --------------------- .rel.debug_frame                 --------------------------
	.section  ".rel.debug_frame", 0, SHT_REL
	// all relocation sections will be dynamically generated by assembler
	// but most of the section header will be kept as is.
	.__section_name         0xb1 	// offset in .shstrtab
	.__section_type         SHT_REL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x3c8 	// maybe updated by assembler
	.__section_size         0x10 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x4
	.__section_entsize      16
	.align                8 	// equivalent to set sh_addralign
    // Relocation[0] : _Z3addPiS_S_Px, Container({'r_offset': 68, 'r_info': 21474836482, 'r_info_sym': 5, 'r_info_type': 2})

// --------------------- .nv.constant0._Z3addPiS_S_Px     --------------------------
	.section	.nv.constant0._Z3addPiS_S_Px,"a",@progbits
	.__section_name         0x87 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x3d8 	// maybe updated by assembler
	.__section_size         0x180 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0xa
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.constant0._Z3addPiS_S_Px:
  	.zero		384


// --------------------- .text._Z3addPiS_S_Px             --------------------------
	.section	.text._Z3addPiS_S_Px,"ax",@progbits
	.__section_name         0x40 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x6
	.__section_addr         0x0
	.__section_offset       0x580 	// maybe updated by assembler
	.__section_size         0x300 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x14000005
	.__section_entsize      0
	.align                128 	// equivalent to set sh_addralign
  	.sectioninfo	@"SHI_REGISTERS=20"
  	.align	128
          .global         _Z3addPiS_S_Px
          .type           _Z3addPiS_S_Px,@function
          .size           _Z3addPiS_S_Px,(.L_x_1 - _Z3addPiS_S_Px)
          .other          _Z3addPiS_S_Px,@"STO_CUDA_ENTRY STV_DEFAULT"
  _Z3addPiS_S_Px:
  .text._Z3addPiS_S_Px:
      [B------:R-:W-:Y:S02]         /*0000*/                   IMAD.MOV.U32 R1, RZ, RZ, c[0x0][0x28] ;
      [B------:R-:W-:-:S01]         /*0010*/                   MOV R2, c[0x0][0x160] ;
      [B------:R-:W-:-:S01]         /*0020*/                   IMAD.MOV.U32 R3, RZ, RZ, c[0x0][0x164] ;
      [B------:R-:W-:-:S01]         /*0030*/                   MOV R4, c[0x0][0x168] ;
      [B------:R-:W-:-:S01]         /*0040*/                   IMAD.MOV.U32 R5, RZ, RZ, c[0x0][0x16c] ;
      [B------:R-:W-:-:S02]         /*0050*/                   ULDC.64 UR4, c[0x0][0x118] ;
      [B------:R0:W5:-:S04]         /*0060*/                   LDG.E R0, desc[UR4][R2.64] ;
      [B------:R0:W5:-:S04]         /*0070*/                   LDG.E R6, desc[UR4][R2.64+0x4] ;
      [B------:R0:W5:-:S04]         /*0080*/                   LDG.E R8, desc[UR4][R2.64+0x8] ;
      [B------:R0:W5:-:S04]         /*0090*/                   LDG.E R10, desc[UR4][R2.64+0xc] ;
      [B------:R0:W5:-:S04]         /*00a0*/                   LDG.E R12, desc[UR4][R2.64+0x10] ;
      [B------:R0:W5:-:S04]         /*00b0*/                   LDG.E R7, desc[UR4][R4.64] ;
      [B------:R0:W5:-:S04]         /*00c0*/                   LDG.E R9, desc[UR4][R4.64+0x4] ;
      [B------:R0:W5:-:S04]         /*00d0*/                   LDG.E R11, desc[UR4][R4.64+0x8] ;
      [B------:R0:W5:-:S04]         /*00e0*/                   LDG.E R13, desc[UR4][R4.64+0xc] ;
      [B------:R0:W5:-:S02]         /*00f0*/                   LDG.E R15, desc[UR4][R4.64+0x10] ;


      [B------:R-:W-:-:S01]         /*0170*/                   IADD3 R6, P0, -R2, R6, RZ ;
      [B------:R-:W-:-:S01]         /*0180*/                   IMAD.MOV.U32 R4, RZ, RZ, c[0x0][0x170] ;
      [B------:R-:W-:Y:S02]         /*0190*/                   MOV R5, c[0x0][0x174] ;
      [B------:R-:W-:-:S01]         /*01a0*/                   MOV R2, c[0x0][0x178] ;
      [B------:R-:W-:-:S02]         /*01b0*/                   IMAD.X R7, R7, 0x1, ~R3, P0 ;
      [B------:R-:W-:-:S01]         /*01c0*/                   IMAD.MOV.U32 R3, RZ, RZ, c[0x0][0x17c] ;

      /////////////////////////////

      // BENCH! deps
      // [B0-----:R-:W-:Y:S02]         /*0100*/                   CS2R R2, SR_CLOCKLO ;

      // [B-----5:R-:W-:-:S01]         /*0110*/                   IADD3 R17, R0, R7, RZ ;
      // [B------:R-:W-:-:S01]         /*0120*/                   IMAD.IADD R9, R6, 0x1, R9 ;
      // [B------:R-:W-:-:S01]         /*0130*/                   IADD3 R11, R8, R11, RZ ;
      // [B------:R-:W-:-:S01]         /*0140*/                   IMAD.IADD R13, R10, 0x1, R13 ;
      [B-----5:R-:W-:-:S03]         /*0150*/                   IADD3 R15, R12, R15, RZ ;

      // [B------:R-:W-:Y:S06]         /*0160*/                   CS2R R6, SR_CLOCKLO ;
      // BENCH!



      /////////////////////////////


      // [B------:R-:W-:-:S04]         /*01d0*/                   STG.E desc[UR4][R4.64], R17 ;
      // [B------:R-:W-:-:S04]         /*01e0*/                   STG.E desc[UR4][R4.64+0x4], R9 ;
      // [B------:R-:W-:-:S03]         /*01f0*/                   STG.E desc[UR4][R4.64+0x8], R11 ;
      // [B------:R-:W-:-:S04]         /*0200*/                   STG.E desc[UR4][R4.64+0xc], R13 ;
      [B------:R-:W-:-:S04]         /*0210*/                   STG.E desc[UR4][R4.64+0x10], R15 ;

      [B------:R-:W-:-:S01]         /*0220*/                   STG.E.64 desc[UR4][R2.64], R6 ;
      [B------:R-:W-:-:S05]         /*0230*/                   EXIT ;
  .L_x_0:
      [B------:R-:W-:Y:S00]         /*0240*/                   BRA `(.L_x_0);
      [B------:R-:W-:Y:S00]         /*0250*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0260*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0270*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0280*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0290*/                   NOP;
      [B------:R-:W-:Y:S00]         /*02a0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*02b0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*02c0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*02d0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*02e0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*02f0*/                   NOP;
  .L_x_1:

  //-------------------------------------------------
  //---------------- END of sections ----------------
  //-------------------------------------------------


// Program segment PT_PHDR, 5
  .__segment  "PT_PHDR", 5
  .__segment_offset  0xb40   		// maybe updated by assembler
  .__segment_vaddr   0x0   		// Seems always 0?
  .__segment_paddr   0x0   		// ???
  .__segment_filesz  0xa8   		// file size, maybe updated by assembler
  .__segment_memsz   0xa8   		// file size + nobits sections, maybe updated by assembler
  .__segment_align     8   		//

// Program segment PT_LOAD, 5
  .__segment  "PT_LOAD", 5
  .__segment_offset  0x3d8   		// maybe updated by assembler
  .__segment_vaddr   0x0   		// Seems always 0?
  .__segment_paddr   0x0   		// ???
  .__segment_filesz  0x4a8   		// file size, maybe updated by assembler
  .__segment_memsz   0x4a8   		// file size + nobits sections, maybe updated by assembler
  .__segment_align     8   		//
  .__segment_startsection    ".nv.constant0._Z3addPiS_S_Px"  		// first section in this segment
  .__segment_endsection      ".text._Z3addPiS_S_Px"  		// last  section in this segment

// Program segment PT_LOAD, 5
  .__segment  "PT_LOAD", 5
  .__segment_offset  0xb40   		// maybe updated by assembler
  .__segment_vaddr   0x0   		// Seems always 0?
  .__segment_paddr   0x0   		// ???
  .__segment_filesz  0xa8   		// file size, maybe updated by assembler
  .__segment_memsz   0xa8   		// file size + nobits sections, maybe updated by assembler
  .__segment_align     8   		//
  .__segment_startsection    "@PROGRAM_HEADER"  		// first section in this segment
  .__segment_endsection      "@PROGRAM_HEADER"  		// last  section in this segment


  //-------------------------------------------------
  //---------------- END of segments ----------------
  //-------------------------------------------------


